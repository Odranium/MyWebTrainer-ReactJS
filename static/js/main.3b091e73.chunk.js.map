{"version":3,"sources":["Vignette.js","App.js","serviceWorker.js","index.js"],"names":["Vignette","className","text","onClick","onMouseEnter","onMouseLeave","App","state","hoverFreq","hover","isMounted","this","setState","console","log","i","hoverFreqCopy","hoverCopy","type","programme","ReactDOM","render","formatsEntrainement","document","getElementById","id","ProgrammeClique","toggleHover","ChoixClique","toggleHoverFreq","ChoixFrequence","Component","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oPAaeA,EARE,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC3D,OACC,yBAAKJ,UAAWA,EAAWE,QAASA,EAASC,aAAcA,EAAcC,aAAcA,GACtF,8BAAOH,KCuHKI,G,wDAxHd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZC,UAAW,EAAC,GAAO,GAAO,GAC1BC,OAAO,EACPC,WAAW,GALC,E,gEASbC,KAAKC,SAAS,CAAEF,WAAW,IAC3BG,QAAQC,IAAI,qB,6CAIZH,KAAKJ,MAAMG,WAAY,EACvBG,QAAQC,IAAI,uB,sCAGGC,GACf,IAAIC,EAAgBL,KAAKJ,MAAMC,UAC/BQ,EAAcD,IAAMC,EAAcD,IACL,IAAzBJ,KAAKJ,MAAMG,WACdC,KAAKC,SAAS,CAAEJ,UAAWQ,M,oCAK5B,IAAIC,GAAaN,KAAKJ,MAAME,OACC,IAAzBE,KAAKJ,MAAMG,WACdC,KAAKC,SAAS,CAAEH,MAAOQ,M,kCAKbC,GACX,IAAIC,EAEJ,OADAN,QAAQC,IAAI,cAAeI,GACnBA,GACP,IAAK,4BACJC,EAAY,CAAC,WAAY,0DACzB,MACD,IAAK,qBACJA,EAAY,CACX,WACA,8HAED,MACD,IAAK,0BACJA,EAAY,CAAC,QAAS,0EAGxBC,IAASC,OAAOV,KAAKW,oBAAoBH,EAAWD,GAAOK,SAASC,eAAe,mB,0CAGhEL,EAAWD,GAAO,IAAD,OACpC,OACC,6BACC,kEACA,yDACA,yBAAKO,GAAG,kBACP,iEACqCP,EADrC,qDAC6F,IAC5F,2BAAIC,EAAU,IAFf,IAEuB,6BAFvB,wCAGuCA,EAAU,GAHjD,KAKA,kBAAC,EAAD,CACClB,UAAW,aAAeU,KAAKJ,MAAME,MACrCP,KAAK,6BACLC,QAAS,kBAAM,EAAKuB,gBAAgBP,EAAU,KAC9Cf,aAAc,kBAAM,EAAKuB,eACzBtB,aAAc,kBAAM,EAAKsB,qB,sCAOdT,GACfL,QAAQC,IAAI,kBAAmBI,K,uCAId,IAAD,OAEhB,OACC,6BACC,kEACA,8DACA,yBAAKO,GAAG,kBACP,kBAAC,EAAD,CACCxB,UAAW,aAAeU,KAAKJ,MAAMC,UAAU,GAC/CN,KAAK,4BACLC,QAAS,kBAAM,EAAKyB,YAAY,8BAChCxB,aAAc,kBAAM,EAAKyB,gBAAgB,IACzCxB,aAAc,kBAAM,EAAKwB,gBAAgB,MAE1C,kBAAC,EAAD,CACC5B,UAAW,aAAeU,KAAKJ,MAAMC,UAAU,GAC/CN,KAAK,qBACLC,QAAS,kBAAM,EAAKyB,YAAY,uBAChCxB,aAAc,kBAAM,EAAKyB,gBAAgB,IACzCxB,aAAc,kBAAM,EAAKwB,gBAAgB,MAE1C,kBAAC,EAAD,CACC5B,UAAW,aAAeU,KAAKJ,MAAMC,UAAU,GAC/CN,KAAK,0BACLC,QAAS,kBAAM,EAAKyB,YAAY,4BAChCxB,aAAc,kBAAM,EAAKyB,gBAAgB,IACzCxB,aAAc,kBAAM,EAAKwB,gBAAgB,U,+BAQ7C,OAAOlB,KAAKmB,qB,GArHIC,c,MCMEC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXjChB,IAASC,OACR,kBAAC,IAAMgB,WAAP,KACC,kBAAC,EAAD,OAEDd,SAASC,eAAe,iBDkHpB,kBAAmBc,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACPhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.3b091e73.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\n/* Ce composant permet l'affichage des \"vignettes\" */\n\nimport React from \"react\";\n\nconst Vignette = ({ className, text, onClick, onMouseEnter, onMouseLeave }) => {\n\treturn (\n\t\t<div className={className} onClick={onClick} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n\t\t\t<span>{text}</span>\n\t\t</div>\n\t);\n};\n\nexport default Vignette;\n","/* eslint-disable react/no-unescaped-entities */\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Vignette from \"./Vignette\";\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thoverFreq: [false, false, false],\n\t\t\thover: false,\n\t\t\tisMounted: false,\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.setState({ isMounted: true });\n\t\tconsole.log(\"Component Mount\");\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.state.isMounted = false;\n\t\tconsole.log(\"Component Unmount\");\n\t}\n\t// Méthode pour gérer la souris sur les vignettes de choix de fréquence\n\ttoggleHoverFreq(i) {\n\t\tlet hoverFreqCopy = this.state.hoverFreq;\n\t\thoverFreqCopy[i] = !hoverFreqCopy[i];\n\t\tif (this.state.isMounted === true) {\n\t\t\tthis.setState({ hoverFreq: hoverFreqCopy });\n\t\t}\n\t}\n\t// Méthode pour gérer la souris sur une vignette\n\ttoggleHover() {\n\t\tlet hoverCopy = !this.state.hover;\n\t\tif (this.state.isMounted === true) {\n\t\t\tthis.setState({ hover: hoverCopy });\n\t\t}\n\t}\n\n\t// Méthode pour gérer le choix de la fréquence avec le clique utilisateur\n\tChoixClique(type) {\n\t\tlet programme;\n\t\tconsole.log(\"ChoixClique\", type);\n\t\tswitch (type) {\n\t\t\tcase \"1 à 3 fois par semaine\":\n\t\t\t\tprogramme = [\"FullBody\", \"à entrainer tout vos muscles à chaque séances\"];\n\t\t\t\tbreak;\n\t\t\tcase \"4 fois par semaine\":\n\t\t\t\tprogramme = [\n\t\t\t\t\t\"HalfBody\",\n\t\t\t\t\t\"à dédier deux séances d'entrainement aux muscles du haut de votre corps, et deux séances au bas de votre corps\",\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase \"+ de 5 fois par semaine\":\n\t\t\t\tprogramme = [\"Split\", \"à entrainer un groupe musculaire différent à chaque séance\"];\n\t\t\t\tbreak;\n\t\t}\n\t\tReactDOM.render(this.formatsEntrainement(programme, type), document.getElementById(\"monProgramme\"));\n\t}\n\n\tformatsEntrainement(programme, type) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h4>Laissez vous guider - étape 2/4</h4>\n\t\t\t\t<h5>Mon format d'entrainement</h5>\n\t\t\t\t<div id=\"choixProgramme\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tVous avez choisi de vous entrainer {type}, votre coach vous recommande un programme de type{\" \"}\n\t\t\t\t\t\t<b>{programme[0]}</b>.<br />\n\t\t\t\t\t\tCe programme d'entrainement consiste {programme[1]}.\n\t\t\t\t\t</p>\n\t\t\t\t\t<Vignette\n\t\t\t\t\t\tclassName={\"programme_\" + this.state.hover}\n\t\t\t\t\t\ttext=\"Je construis mon programme\"\n\t\t\t\t\t\tonClick={() => this.ProgrammeClique(programme[0])}\n\t\t\t\t\t\tonMouseEnter={() => this.toggleHover()}\n\t\t\t\t\t\tonMouseLeave={() => this.toggleHover()}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t// Méthode pour gérer le clique sur le bouton \"Je construis mon programme\"\n\tProgrammeClique(type) {\n\t\tconsole.log(\"ProgrammeClique\", type);\n\t}\n\n\t//Méthode pour afficher le panel de choix de fréquence d'entrainement\n\tChoixFrequence() {\n\t\t// eslint-disable-next-line no-unused-vars\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h4>Laissez vous guider - étape 1/4</h4>\n\t\t\t\t<h5>Ma fréquence d'entrainement</h5>\n\t\t\t\t<div id=\"choixFrequence\">\n\t\t\t\t\t<Vignette\n\t\t\t\t\t\tclassName={\"frequence_\" + this.state.hoverFreq[0]}\n\t\t\t\t\t\ttext=\"1 à 3 fois par semaine\"\n\t\t\t\t\t\tonClick={() => this.ChoixClique(\"1 à 3 fois par semaine\")}\n\t\t\t\t\t\tonMouseEnter={() => this.toggleHoverFreq(0)}\n\t\t\t\t\t\tonMouseLeave={() => this.toggleHoverFreq(0)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Vignette\n\t\t\t\t\t\tclassName={\"frequence_\" + this.state.hoverFreq[1]}\n\t\t\t\t\t\ttext=\"4 fois par semaine\"\n\t\t\t\t\t\tonClick={() => this.ChoixClique(\"4 fois par semaine\")}\n\t\t\t\t\t\tonMouseEnter={() => this.toggleHoverFreq(1)}\n\t\t\t\t\t\tonMouseLeave={() => this.toggleHoverFreq(1)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Vignette\n\t\t\t\t\t\tclassName={\"frequence_\" + this.state.hoverFreq[2]}\n\t\t\t\t\t\ttext=\"+ de 5 fois par semaine\"\n\t\t\t\t\t\tonClick={() => this.ChoixClique(\"+ de 5 fois par semaine\")}\n\t\t\t\t\t\tonMouseEnter={() => this.toggleHoverFreq(2)}\n\t\t\t\t\t\tonMouseLeave={() => this.toggleHoverFreq(2)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn this.ChoixFrequence();\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"monProgramme\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}